% Encoding: UTF-8


@Thesis{Aasavaeli2017,
  Title                    = {Scripting Engine for Execution of Experimental Scripts on {TTÜ} Nanosatellite},
  Abstract                 = {Main subject for this thesis is choosing a scripting engine for TTÜ (Tallinna Tehnikaülikool) nanosatellite. The scripting engine must provide functionality, like logging, system debugging, determination, and perform certain tasks, like communicating with the bus, file writing and reading. The engine’s language must be powerful enough to fill our needs, yet small and simple enough to have as small flash and RAM (Random Access Memory) footprint as possible.

The scripting engine should also be implemented on an external board (STM32f3discovery). This way the engine’s flash footprint, RAM footprint and performance can be tested in our conditions.

The outcome was that, both Pawn and My-Basic were implemented on the external board. The flash and RAM footprint tests along with performance tests were executed and results
were analysed.

This thesis is written in English and is 38 pages long, including 5 chapters, 6 figures and 2 tables.},
  Author                   = {Sander Aasaväli},
  School                   = {Tallinn University of Technology},
  Type                     = {Bachelor's Thesis},
  Url                      = {https://digi.lib.ttu.ee/i/?8438},
  Year                     = {2017},

  File                     = {:/home/ervin/Documents/ut/sources/Aasavaeli2017.pdf:PDF},
  Keywords                 = {TTÜ Mektory nanosatellite, satellite, cosmos, nanosatellite, scripting engine, Ansi C, bachelor's theses},
  Owner                    = {Ervin Oro},
  Timestamp                = {04.03.2018}
}

@Electronic{Barry2005,
  Title                    = {RE: dynamic linking/loading on at91sam7s},
  Author                   = {Richard Barry},
  Month                    = sep,
  Url                      = {https://www.freertos.org/FreeRTOS_Support_Forum_Archive/September_2005/freertos_dynamic_linking_loading_on_at91sam7s_1346460.html},
  Year                     = {2005},

  Owner                    = {Ervin Oro},
  Timestamp                = {02.01.2018#m#},
  Urldate                  = {2018-01-02}
}

@Book{Chacon2018,
  Title                    = {Pro git},
  Author                   = {Chacon, Scott and Straub, Ben},
  Publisher                = {Apress},
  Year                     = {2018},
  Edition                  = {2},
  Month                    = apr,

  File                     = {:/home/ervin/Documents/ut/sources/Chacon2018.pdf:PDF},
  ISBN                     = {978-1484200773},
  Owner                    = {Ervin Oro},
  Timestamp                = {17.04.2018},
  Url                      = {https://git-scm.com/book/en/v2}
}

@InProceedings{Dong2009,
  Title                    = {Dynamic linking and loading in networked embedded systems},
  Author                   = {Dong, Wei and Chen, Chun and Liu, Xue and Bu, Jiajun and Liu, Yunhao},
  Booktitle                = {2009 {IEEE} 6\textsuperscript{th} International Conference on Mobile Adhoc and Sensor Systems},
  Year                     = {2009},
  Organization             = {IEEE},
  Pages                    = {554--562},

  Comment                  = {SELF, pre-linking and pre-relocating with optional dynamic linking and pre-locating},
  Doi                      = {10.1109/MOBHOC.2009.5336957},
  File                     = {:/home/ervin/Documents/ut/sources/Dong2009.pdf:PDF},
  Keywords                 = {Joining processes,
Embedded system,
Kernel,
Ground penetrating radar,
Geophysical measurement techniques,
Code standards,
Operating systems,
Standards development,
Costs,
Runtime},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {http://ieeexplore.ieee.org.ezproxy.utlib.ut.ee/document/5336957/}
}

@InProceedings{Dunkels2006,
  Title                    = {Run-time dynamic linking for reprogramming wireless sensor networks},
  Author                   = {Dunkels, Adam and Finne, Niclas and Eriksson, Joakim and Voigt, Thiemo},
  Booktitle                = {Proceedings of the 4\textsuperscript{th} international conference on Embedded networked sensor systems},
  Year                     = {2006},
  Month                    = dec,
  Organization             = {ACM},
  Pages                    = {15--28},

  Abstract                 = {From experience with wireless sensor networks it has become apparent that dynamic reprogramming of the sensor nodes is a useful feature. The resource constraints in terms of energy, memory, and processing power make sensor network reprogramming a challenging task. Many different mechanisms for reprogramming sensor nodes have been developed ranging from full image replacement to virtual machines.We have implemented an in-situ run-time dynamic linker and loader that use the standard ELF object file format. We show that run-time dynamic linking is an effective method for reprogramming even resource constrained wireless sensor nodes. To evaluate our dynamic linking mechanism we have implemented an application-specific virtual machine and a Java virtual machine and compare the energy cost of the different linking and execution models. We measure the energy consumption and execution time overhead on real hardware to quantify the energy costs for dynamic linkin.Our results suggest that while in general the overhead of a virtual machine is high, a combination of native code and virtual machine code provide good energy efficiency. Dynamic run-time linking can be used to update the native code, even in heterogeneous networks.},
  Comment                  = {Contiki OS, CELF, dynamic linking, relocating and loading of modules},
  Doi                      = {10.1145/1182807.1182810},
  File                     = {:/home/ervin/Documents/ut/sources/Dunkels2006.pdf:PDF},
  ISBN                     = {1-59593-343-3},
  Keywords                 = {Wireless sensor networks, Embedded systems, Operating systems, Dynamic linking, Virtual machines},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {https://dl-acm-org.ezproxy.utlib.ut.ee/citation.cfm?id=1182810}
}

@InProceedings{Ehrpais2016,
  Title                    = {ESTCube-2 mission and satellite design},
  Author                   = {Ehrpais, Hendrik and Sünter, Indrek and Ilbis, Erik and Dalbins, Janis and Iakubivskyi, Iaroslav and Kulu, Erik and Ploom, Indrek and Janhunen, Pekka and Kuusk, Joel and Šate, Jānis and Trops, Roberts and Slavinskis, Andris},
  Booktitle                = {Small Satellites, System \& Services Symposium},
  Year                     = {2016},
  Month                    = jun,

  Abstract                 = {Here we present the preliminary mission design for the ESTCube-2 three-unit CubeSat. Its main
mission is to test Coulomb drag propulsion. Coulomb drag can be used in Low-Earth Orbit by
deploying and charging a tether that is used to brake the orbital velocity of the satellite and reduce
its orbital altitude. To test this concept, ESTCube-2 will deploy and charge a 300 m tether. Such a
tether could deorbit ESTCube-2 from the altitude of 700 km to 500 km in half a year.
Other payloads that are being considered for the ESTCube-2 satellite are an Earth observation
camera, a C-band communications system and an experimental laser communication system.
ESTCube-2 in-orbit demonstration platform will also be designed for other electric solar wind sail
experiments outside of the influence of Earth{\textquoteright}s magnetic field. The satellite bus will be integrated
into one system that could also be reused for different types of missions. The integrated system is
developed to maximise the space for payloads on a nanosatellite. This paper presents the payloads
and system design of ESTCube-2.},
  File                     = {:/home/ervin/Documents/ut/sources/Ehrpais2016.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {https://www.researchgate.net/publication/303974831_ESTCube-2_mission_and_satellite_design}
}

@InProceedings{Garrido1998,
  Title                    = {{MINISAT01} On-Board Software Maintenance},
  Author                   = {{Garrido}, B. and {Garcia}, A. and {Alfaro}, N. and {Asensio}, J.~D.~M.},
  Booktitle                = {{DASIA} 98 - Data Systems in Aerospace},
  Year                     = {1998},
  Month                    = jul,
  Pages                    = {65},
  Series                   = {ESA Special Publication},
  Volume                   = {422},

  Adsnote                  = {Provided by the SAO/NASA Astrophysics Data System},
  Adsurl                   = {http://adsabs.harvard.edu/abs/1998ESASP.422...65G},
  File                     = {:/home/ervin/Documents/ut/sources/Garrido1998.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {http://adsabs.harvard.edu/full/1998ESASP.422...65G}
}

@InProceedings{Greco2005,
  Title                    = {Operational modification of the {M}ars exploration rovers' flight software},
  Author                   = {M. E. Greco and J. F. Snyder},
  Booktitle                = {2005 {IEEE} International Conference on Systems, Man and Cybernetics},
  Year                     = {2005},
  Month                    = oct,
  Organization             = {IEEE},
  Pages                    = {8--13},
  Volume                   = {1},

  Abstract                 = {The Mars exploration rovers (MER) flight software (FSW) was designed from the outset to be modified during operations. Two principal methods were envisioned: modifying (patch) the existing image, or entirely replacing (load) the existing image with a new version. In fact, both methods have been successfully used since the rovers landed in January of 2004. This paper discusses the content of the uplink products that are sent to the rover, the planning of the patch and load activities, the testing of the products and procedures, and the actual operations themselves. Lessons learned and application to future missions are also discussed.},
  Doi                      = {10.1109/ICSMC.2005.1571114},
  File                     = {:/home/ervin/Documents/ut/sources/Greco2005.pdf:PDF},
  ISSN                     = {1062-922X},
  Keywords                 = {Mars;aerospace computing;planetary rovers;Mars exploration rovers flight software;load operation;operational modification;operational procedure;patch operation;Aerospace electronics;Application software;EPROM;Laboratories;Mars;Nonvolatile memory;Propulsion;Rough surfaces;Software performance;Surface roughness;Flight software;load;modification;operational procedure;operations;patch},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {http://ieeexplore.ieee.org.ezproxy.utlib.ut.ee/abstract/document/1571114/}
}

@Mastersthesis{Haljaste2017,
  Title                    = {Electronics design and testing for {ESTCube-2} on-board computer system with sensors for attitude determination},
  Abstract                 = {ESTCube-2 will be a 3U picosatellite planned to launch in 2019 to perform experiments in low Earth orbit. On-board computer system is required to control the satellite while powered up and has to provide computational power and reliable storage for other subsystems. Attitude and orbit control system is responsible for satellite’s detumbling, pointing, spin-up and for controlling thrusters. This thesis presents a prototype electronics board developed for both systems. On-board computer system features STMicroelectronics Cortex-M7 microcontroller with common bus interfaces and point-to-point signaling lines for all other systems planned for ESTCube-2. Data and programs are stored in three types of external non-volatile memories - QSPI NOR flash, FRAM and MRAM. For attitude determination sensors a dedicated connector and a demonstration prototype expansion board were developed featuring magnetometer, accelerometer and two gyroscopes. To test the developed boards simple firmware was written using manufacturer’s provided hardware abstraction layer and an initialization source code generator.},
  Author                   = {Hannes Haljaste},
  School                   = {University of Tartu},
  Url                      = {http://dspace.ut.ee/handle/10062/56547},
  Year                     = {2017},
  Month                    = jun,

  File                     = {:/home/ervin/Documents/ut/sources/Haljaste2017.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018}
}

@InProceedings{Han2005,
  Title                    = {A dynamic operating system for sensor nodes},
  Author                   = {Han, Chih-Chieh and Kumar, Ram and Shea, Roy and Kohler, Eddie and Srivastava, Mani},
  Booktitle                = {Proceedings of the 3\textsuperscript{rd} international conference on Mobile systems, applications, and services},
  Year                     = {2005},
  Organization             = {ACM},
  Pages                    = {163--176},

  Abstract                 = {Sensor network nodes exhibit characteristics of both embedded systems and general-purpose systems. They must use little energy and be robust to environmental conditions, while also providing common services that make it easy to write applications. In TinyOS, the current state of the art in sensor node operating systems, reusable components implement common services, but each node runs a single statically-linked system image, making it hard to run multiple applications or incrementally update applications. We present SOS, a new operating system for mote-class sensor nodes that takes a more dynamic point on the design spectrum. SOS consists of dynamically-loaded modules and a common kernel, which implements messaging, dynamic memory, and module loading and unloading, among other services. Modules are not processes: they are scheduled cooperatively and there is no memory protection. Nevertheless, the system protects against common module bugs using techniques such as typed entry points, watchdog timers, and primitive resource garbage collection. Individual modules can be added and removed with minimal system interruption. We describe SOS's design and implementation, discuss tradeoffs, and compare it with TinyOS and with the Maté virtual machine. Our evaluation shows that despite the dynamic nature of SOS and its higher-level kernel interface, its long term total usage nearly identical to that of systems such as Matè and TinyOS.},
  Comment                  = {PIC dynamically loadable modules.
Modules access kernel functions using a jump table. Modules register their functions.},
  Doi                      = {10.1145/1067170.1067188},
  File                     = {:/home/ervin/Documents/ut/sources/Han2005.pdf:PDF},
  ISBN                     = {1-931971-31-5},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {https://dl-acm-org.ezproxy.utlib.ut.ee/citation.cfm?doid=1067170.1067188}
}

@InProceedings{Iakubivskyi2016,
  author    = {Iakubivskyi, Iaroslav and Ehrpais, Hendrik and Dalbins, Janis and Oro, Ervin and Kulu, Erik and K{\"u}tt, Johan and Janhunen, Pekka and Slavinskis, Andris and Ilbis, Erik and Ploom, Indrek and Sünter, Indrek and Trops, Roberts and Merisalu, Maido},
  title     = {{ESTCube-2} mission analysis: plasma brake experiment for deorbiting},
  booktitle = {67\textsuperscript{th} International Astronautical Congress ({IAC} 2016): Making space accessible and affordable to all countries},
  year      = {2016},
  number    = {IAC-16,E2,4,4,x33190},
  publisher = {International Astronautical Federation},
  abstract  = {Here we present the preliminary mission analysis for the ESTCube-2 three-unit CubeSat, which is designed to test Coulomb drag propulsion. One of the applications of Coulomb drag is the electric solar wind sail (E-sail), that could be used to travel within the Solar System with record speeds of up to 30 km/s, using solar wind as propellent. A second application includes the charging of a tether in low Earth orbit to decrease the orbital velocity of the satellite. The negatively charged plasma brake tether interacts with the ambient ionospheric plasma ram flow to slow down the satellite. To test this concept, ESTCube-2 will deploy a 300 m tether and subsequently charge it to 1 kV. The charged tether will be used to reduce the orbital altitude of the satellite. Such a tether could deorbit ESTCube-2 from an altitude of 700 km to 500 km in half a year. The previous ESTCube-1 and the upcoming Aalto-1 missions have shown that it is feasible to host a similar payload in 1/3 to 1/2 of a CubeSat unit. The mass of a 300 m long tether is nominally 30 grams according to conservative estimates. Hence the plasma brake is a lightweight, efficient, cost-effective, and scalable deorbiting system with a potential to address the space debris issue at critical altitudes of 900 km and less. The ESTCube-2 in-orbit demonstration platform will be designed and developed for future employment for other Coulomb drag propulsion experiments. One example is the demonstration the electric solar wind sail (E-sail) outside the Earth's magnetosphere, which would allow for the confirmation of analytical, numerical and laboratory estimations of the E-sail force. The main requirements for the satellite bus occupying 1/2 of a CubeSat unit are to provide the total angular momentum of 23 Nms for centrifugal tether deployment, to provide means of deployment verification, and to provide up to 3 W of power for charging the tether. This paper will present an overview of the requirements and performance dynamics of each subsystem housed in the miniaturized integrated bus and its payloads. In addition, consideration of systems for high spin rate will be presented.},
  file      = {:/home/ervin/Documents/ut/sources/Iakubivskyi2016.pdf:PDF},
  owner     = {Ervin Oro},
  timestamp = {07.03.2018},
  url       = {https://www.researchgate.net/publication/308054281_ESTCube-2_mission_analysis_plasma_brake_experiment_for_deorbiting},
}

@Article{Kilburn1962,
  author    = {T. Kilburn and D. B. G. Edwards and M. J. Lanigan and F. H. Sumner},
  title     = {One-Level Storage System},
  journal   = {IRE Transactions on Electronic Computers},
  year      = {1962},
  volume    = {EC-11},
  number    = {2},
  pages     = {223--235},
  month     = apr,
  issn      = {0367-9950},
  abstract  = {After a brief survey of the basic Atlas machine, the paper describes an automatic system which in principle can be applied to any combination of two storage systems so that the combination can be regarded by the machine user as a single level. The actual system described relates to a fast core store-drum combination. The effect of the system on instruction times is illustrated, and the tape transfer system is also introduced since it fits basically in through the same hardware. The scheme incorporates a ``learning'' program, a technique which can be of greater importance in future computers.},
  doi       = {10.1109/TEC.1962.5219356},
  file      = {:/home/ervin/Documents/ut/sources/Kilburn1962.pdf:PDF},
  keywords  = {Computer peripherals;Hardware;Magnetic cores;Magnetic materials;Photonic crystals;Programming profession;Prototypes;Storage automation;Switches;Terrorism},
  owner     = {Ervin Oro},
  timestamp = {20.03.2018},
  url       = {http://ieeexplore.ieee.org/abstract/document/5219356/},
}

@Book{Levine1999,
  title     = {Linkers and Loaders},
  publisher = {Morgan Kaufmann},
  year      = {1999},
  author    = {John R. Levine},
  series    = {The Morgan Kaufmann Series in Software Engineering and Programming},
  month     = oct,
  isbn      = {1-55860-496-0},
  owner     = {Ervin Oro},
  timestamp = {05.03.2018},
  url       = {http://www.iecc.com/linker/},
}

@Article{Nilchiani2009,
  author    = {Roshanak Nilchiani},
  title     = {Valuing software-based options for space systems flexibility},
  journal   = {Acta Astronautica},
  year      = {2009},
  volume    = {65},
  number    = {3},
  pages     = {429--441},
  issn      = {0094-5765},
  abstract  = {Abstract On-board software is a critical element in the operation and functionality of a space system. The functional requirements of space systems can change over time, and unforeseen failures can affect systems performance, thereby necessitating modifications and upgrades to the on-board software. Remote software upgrades as an option, can help space systems in operation to maintain their functionality in an uncertain environment, or even take advantage of uncertainty by adding novel applications or improving functionality while in space. In this paper, the concept of increasing flexibility of space systems through software is defined and some examples are discussed. The author presents a quantitative framework for measuring the value of flexibility in space systems. A case study on a direct broadcast satellite (DBS) is presented and the value of flexibility introduced to the satellite by software upgrade is measured using the flexibility framework. The quantitative flexibility framework allows decision-makers to assess the extent of software flexibility their space systems can exhibit in the face of uncertainty.},
  comment   = {justifications for updates},
  doi       = {10.1016/j.actaastro.2009.02.012},
  file      = {:/home/ervin/Documents/ut/sources/Nilchiani2009.pdf:PDF},
  keywords  = {Flexibility value, Flexibility framework, Spacecraft software, Direct broadcast satellite},
  owner     = {Ervin Oro},
  timestamp = {03.01.2018},
  url       = {http://www.sciencedirect.com.ezproxy.utlib.ut.ee/science/article/pii/S0094576509001179},
}

@Electronic{Riemersma2017,
  author    = {Thiadmer Riemersma},
  month     = oct,
  year      = {2017},
  title     = {The pawn language},
  url       = {https://www.compuphase.com/pawn/pawn.htm},
  owner     = {Ervin Oro},
  timestamp = {23.02.2018},
  urldate   = {2018-02-23},
}

@Article{Shen2010,
  Title                    = {A Server-side Pre-linking Mechanism for Updating Embedded Operating System Dynamically.},
  Author                   = {Bor-Yeh Shen and Mei-Ling Chiang},
  Journal                  = {Journal of Information Science \& Engineering},
  Year                     = {2010},
  Number                   = {1},
  Pages                    = {39},
  Volume                   = {26},

  Abstract                 = {To allow embedded operating systems to update their components on-the-fly, dynamic update mechanism is required for operating systems to be patched or added extra functionalities in without the need of rebooting the machines. However, embedded environments are usually resource-limited in terms of memory size, processing power, power consumption, and network bandwidth. Thus, dynamic update for embedded operating systems should be designed to make the best use of limited resources. In this paper, a server-side pre-linking mechanism is proposed to make dynamic updates of embedded operating system efficiently. Applying this mechanism can reduce not only memory usage and CPU processing time for dynamic update, but also data transmission size for updated components. Power consumption can be reduced as well. We have implemented this mechanism in LyraOS which is a component-based embedded operating system. Performance evaluation shows that the size of updated components applying the proposed },
  Comment                  = {Using MMU hardware to provide virtual memory instead of relocation},
  File                     = {:/home/ervin/Documents/ut/sources/Shen2010.pdf:PDF},
  ISSN                     = {10162364},
  Keywords                 = {EMBEDDED computer systems, OPERATING systems (Computers), DATA transmission systems, COMPUTER storage devices, KERNEL functions, LINUX operating systems, dynamic update, embedded system, memory protection, modules, operating system},
  Owner                    = {Ervin Oro},
  Timestamp                = {03.01.2018},
  Url                      = {http://www.iis.sinica.edu.tw/page/jise/2010/201001_04.html}
}

@Article{Slavinskis2015,
  author    = {Slavinskis, Andris and M. Pajusalu and H. Kuuste and E. Ilbis and T. Eenmäe and I. Sünter and K. Laizans and H. Ehrpais and P. Liias and E. Kulu and J. Viru and J. Kalde and U. Kvell and J. Kütt and K. Zalite and K. Kahn and S. Lätt and J. Envall and P. Toivanen and J. Polkko and P. Janhunen and R. Rosta and T. Kalvas and R. Vendt and V. Allik and M. Noorma},
  title     = {{ESTCube-1} in-orbit experience and lessons learned},
  journal   = {{IEEE} Aerospace and Electronic Systems Magazine},
  year      = {2015},
  volume    = {30},
  number    = {8},
  pages     = {12--22},
  month     = aug,
  issn      = {0885-8985},
  abstract  = {In this article, we report on the in-orbit experience - an overview of ESTCube-1 operations from the launch until the experiment, as well as on lessons learned from five years of development and almost two years of operations. Lessons are identified from the point of view of system engineering, electrical engineering, mechanical engineering, software engineering, testing and measurements, payload, and management. Detailed flight results of ESTCube-1 will be provided in dedicated articles. We hope that other teams can benefit from our experience.},
  doi       = {10.1109/MAES.2015.150034},
  file      = {:/home/ervin/Documents/ut/sources/Slavinskis2015.pdf:PDF},
  keywords  = {aerospace engineering;aerospace testing;artificial satellites;ESTCube-1 operations;electrical engineering;in-orbit experience;management;measurements;mechanical engineering;payload;software engineering;system engineering;testing;Design methodology;European Space Agency;Orbits;Satellites;Space research},
  owner     = {Ervin Oro},
  timestamp = {05.03.2018},
  url       = {http://ieeexplore.ieee.org.ezproxy.utlib.ut.ee/document/7286959/},
}

@Manual{STMicroelectronics2018,
  Title                    = {{RM0410} {R}eference manual: {STM32F76xxx} and {STM32F77xxx} advanced {Arm\textsuperscript{\textregistered}}-based 32-bit {MCU}s},
  Author                   = {{STMicroelectronics}},
  Edition                  = {Rev 4},
  Month                    = mar,
  Year                     = {2018},

  File                     = {:/home/ervin/Documents/ut/sources/STMicroelectronics2018.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {21.03.2018},
  Url                      = {http://www.st.com/content/ccc/resource/technical/document/reference_manual/group0/96/8b/0d/ec/16/22/43/71/DM00224583/files/DM00224583.pdf/jcr:content/translations/en.DM00224583.pdf}
}

@Manual{STMicroelectronics2017,
  Title                    = {{PM0253} {P}rogramming manual: {STM32F7} {S}eries and {STM32H7} {S}eries {Cortex\textsuperscript{\textregistered}}-{M7} processor programming manual},
  Author                   = {{STMicroelectronics}},
  Edition                  = {Rev 4},
  Month                    = nov,
  Year                     = {2017},

  File                     = {:/home/ervin/Documents/ut/sources/STMicroelectronics2017.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {17.04.2018},
  Url                      = {http://www.st.com/content/ccc/resource/technical/document/programming_manual/group0/78/47/33/dd/30/37/4c/66/DM00237416/files/DM00237416.pdf/jcr:content/translations/en.DM00237416.pdf}
}

@Mastersthesis{Suenter2014,
  Title                    = {Software for the {ESTCube-1} command and data handling system},
  Abstract                 = {Antud töö raames sai loetletud ESTCube-1 Käsu- ja Andmehaldussüsteemile ehk pardaarvutile esitatud nõuded. Vastavalt nõuetele sai arendatud pardaarvuti tark- vara, mis sisaldab FreeRTOS ajureid andmesiinide ja pardaseadmete jaoks, vea- haldust, käsuhaldurit, moodulit telemeetria salvestamiseks ning failisüsteeme jadali- idesega ferroelektriliste muutmälude ja välkmälude jaoks. Mitmed arendatud tarkvaramoodulitest on leidnud kasutust ka ESTCube-1 kaamerasüsteemi pardal. Arendatud tarkvaral on sooritatud teste kahel satelliidi maapealsel mudelil ning orbiidil lendaval satelliidil. Mõningate eranditega on orbiidil täheldatud prob- leemid edukalt reprodutseeritud maapealsetel mudelitel, ning uus parandustega versioon tarkvarast on edukalt orbiidil olevale satelliidile laetud. Orbiidil on pardaarvutil edukalt katsetatud satelliidi orientatsiooni määramise ja juhtimise tarkvara. Andurite mõõdiste eeltöötluse algoritmid on orbiidil testi- tud ning satelliidi orientatsiooni määramise algoritmi väljundit on võrreldud par- dakaamera piltidega. Kasutades satelliidi osutamise algoritmi koos pardaarvuti skriptidega, on täidetud ka osa ESTCube-1 missioonist - pildistada Eestit kos- mosest. Seni on ESTCube-1 olnud orbiidil veidi üle aasta ning kõik satelliidi süsteemid on endiselt töökorras.},
  Author                   = {Indrek Sünter},
  School                   = {University of Tartu},
  Url                      = {http://hdl.handle.net/10062/43113},
  Year                     = {2014},
  Month                    = sep,

  File                     = {:/home/ervin/Documents/ut/sources/Suenter2014.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018}
}

@Article{Suenter2016,
  author    = {Indrek Sünter and Slavinskis, Andris and U. Kvell and A. Vahter and H. Kuuste and M. Noorma and J. Kutt and R. Vendt and K. Tarbe and M. Pajusalu and M. Veske and T. Ilves},
  title     = {Firmware updating systems for nanosatellites},
  journal   = {{IEEE} Aerospace and Electronic Systems Magazine},
  year      = {2016},
  volume    = {31},
  number    = {5},
  pages     = {36--44},
  month     = may,
  issn      = {0885-8985},
  abstract  = {During the course of a space mission unexpected events can occur regardless of rigorous testing. In order to ensure the ability of a spacecraft to recover and adapt to new situations, it may be necessary to update the firmware for resolving the software issues, work around hardware problems, or introduce new features. The importance of remote firmware updates as well as a method to calculate an indicative value of flexibility in space missions is summarized by R. Nilchiani [1].},
  doi       = {10.1109/MAES.2016.150162},
  file      = {:/home/ervin/Documents/ut/sources/Suenter2016.pdf:PDF},
  keywords  = {artificial satellites;firmware;firmware updating systems;flexibility;hardware problems;indicative value;nanosatellites;remote firmware updates;rigorous testing;software issues;space mission unexpected events;spacecraft;Ferroelectric films;Microprogramming;Nonvolatile memory;Random access memory;Satellites;Software development;Testing},
  owner     = {Ervin Oro},
  timestamp = {05.03.2018},
  url       = {http://ieeexplore.ieee.org.ezproxy.utlib.ut.ee/document/7498202/},
}

@Thesis{Tarbe2013,
  Title                    = {Bootloader for {ESTCube-1} Command and Data Handling System and Camera module},
  Abstract                 = {Estonian first satellite ESTCube-1 consists of several modules. The main on-board computer Command and Data Handling System (CDHS) and Camera module (CAM) have similar micro controller units: CDHS uses STM32F1 and CAM STM32F2 series micro controllers manufactured by STMicroelectronics. The goal of this thesis is to design and implement a bootloader, which enables software upgrading for CDHS and CAM, while ESTCube-1 is orbiting Earth. So far bootloader has been used many times to upgrade firmware or to boot into the main firmware. Bootloader has also successfully booted CDHS while ESTCube-1 is on low Earth orbit. While the satellite has been orbiting Earth, there has been no firmware upgrades yet. In conclusion the goals of this thesis were achieved and the end-product is actually used on the first Estonian satellite ESTCube-1.},
  Author                   = {Karl Tarbe},
  School                   = {University of Tartu},
  Type                     = {Bachelor's Thesis},
  Url                      = {http://comserv.cs.ut.ee/ati_thesis/datasheet.php?id=29401&year=2013&language=en},
  Year                     = {2013},

  File                     = {:/home/ervin/Documents/ut/sources/Tarbe2013.pdf:PDF},
  Owner                    = {Ervin Oro},
  Timestamp                = {04.03.2018}
}

@InProceedings{Xinyu2017,
  Title                    = {A Code Self-Relocation Method for Embedded System},
  Author                   = {T. Xinyu and Z. Changyou and L. Chen and K. Aourra and L. YuanZhang},
  Booktitle                = {2017 {IEEE} International Conference on Computational Science and Engineering {(CSE)} and {IEEE} International Conference on Embedded and Ubiquitous Computing {(EUC)}},
  Year                     = {2017},
  Month                    = jul,
  Pages                    = {688--691},
  Volume                   = {1},

  Abstract                 = {Symbol relocation is very important for program linking and execution. For modern operating systems in PC, symbol relocation process is completed by static linking or dynamic linking. For the execution of Executable and Linkable Format (ELF) file in Linux, dynamic linker will resolve symbols at runtime. However, many embedded operating systems inhibit supporting dynamic linking of ELF file, which results in the symbol relocation is not successful. In this paper, we proposed a code self-relocation method. This method doesn't need extra support from operating system, and the whole relocation process is finished by code in the program. We relocate the entry in Global Offset Table (GOT) and the pointer in structure. This method is evaluated in a program with 37 source files. The result shows that all the entries in GOT and pointers in structure have been relocated to the absolute address, and the symbol relocation is successful. It proves that the method is simple but effective for the developer.},
  Doi                      = {10.1109/CSE-EUC.2017.131},
  File                     = {:/home/ervin/Documents/ut/sources/Xinyu2017.pdf:PDF},
  Keywords                 = {embedded systems;program compilers;ELF file;GOT;Linux;code self-relocation method;dynamic linker;dynamic linking;embedded operating systems;executable and linkable format;global offset table;program code;program execution;program linking;static linking;symbol relocation;Geophysical measurement techniques;Ground penetrating radar;Joining processes;Libraries;Loading;Operating systems;Runtime;ELF;GOT;Symbol relocation;dynamic linking;self-relocaiton},
  Owner                    = {Ervin Oro},
  Timestamp                = {05.03.2018},
  Url                      = {http://ieeexplore.ieee.org.ezproxy.utlib.ut.ee/document/8005883/}
}

@InProceedings{Simon2006,
  author    = {Simon, Doug and Cifuentes, Cristina and Cleal, Dave and Daniels, John and White, Derek},
  title     = {{Java\texttrademark} on the Bare Metal of Wireless Sensor Devices: The {Squawk} {Java} Virtual Machine},
  booktitle = {Proceedings of the 2\textsuperscript{Nd} International Conference on Virtual Execution Environments},
  year      = {2006},
  series    = {VEE '06},
  pages     = {78--88},
  publisher = {ACM},
  acmid     = {1134773},
  doi       = {10.1145/1134760.1134773},
  file      = {:/home/ervin/Documents/ut/sources/Simon2006.pdf:PDF},
  isbn      = {1-59593-332-8},
  keywords  = {IEEE 802.15.4, Java virtual machine, Sun SPOT, embedded systems, wireless sensor networks},
  location  = {Ottawa, Ontario, Canada},
  numpages  = {11},
  owner     = {Ervin Oro},
  timestamp = {03.05.2018},
  url       = {http://doi.acm.org.ezproxy.utlib.ut.ee/10.1145/1134760.1134773},
}

@InProceedings{Levis2002,
  author    = {Levis, Philip and Culler, David},
  title     = {{Mat\'E}: {A} Tiny Virtual Machine for Sensor Networks},
  booktitle = {Proceedings of the 10\textsuperscript{th} International Conference on Architectural Support for Programming Languages and Operating Systems},
  year      = {2002},
  series    = {ASPLOS X},
  pages     = {85--95},
  publisher = {ACM},
  acmid     = {605407},
  doi       = {10.1145/605397.605407},
  file      = {:/home/ervin/Documents/ut/sources/Levis2002.pdf:PDF},
  isbn      = {1-58113-574-2},
  location  = {San Jose, California},
  numpages  = {11},
  owner     = {Ervin Oro},
  timestamp = {03.05.2018},
  url       = {http://doi.acm.org.ezproxy.utlib.ut.ee/10.1145/605397.605407},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: saveActions:enabled;
date[normalize_date]
pages[normalize_page_numbers]
month[normalize_month]
all-text-fields[ordinals_to_superscript]
title[html_to_latex]
;}

@Comment{jabref-entrytype: Thesis: req[abstract;author;school;title;type;url;year] opt[address;month;note]}
